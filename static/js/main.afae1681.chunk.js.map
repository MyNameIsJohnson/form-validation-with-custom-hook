{"version":3,"sources":["hooks/validate.js","components/BasicForm.js","App.js","index.js"],"names":["useValidate","validateValue","useState","enteredValue","setEnteredValue","isTouched","setIsTouched","errorMessage","setErrorMessage","valueIsValid","value","hasError","isValid","valueChangeHandler","e","target","inputBlurHandler","reset","BasicForm","props","trim","enteredFirstName","firstNameHasError","firstNameIsValid","firstNameChangeHandler","firstNameBlurHandler","firstNameReset","firstNameErrorMessage","enteredLastName","lastNameHasError","lastNameIsValid","lastNameChangeHandler","lastNameBlurHandler","lastNameReset","lastNameErrorMessage","regEx","test","enteredEmail","emailHasError","emailIsValid","emailChangeHandler","emailBlurHandler","emailReset","emailErrorMessage","formIsValid","nameInputClasses","emailInputClasses","lastNameInputClasses","onSubmit","preventDefault","className","htmlFor","type","id","onBlur","onChange","disabled","App","ReactDOM","render","document","getElementById"],"mappings":"mLAwCeA,EAtCK,SAACC,GAEnB,MAAwCC,mBAAS,IAAjD,mBAAOC,EAAP,KAAqBC,EAArB,KAEA,EAAkCF,oBAAS,GAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KACA,EAAwCJ,mBAAS,IAAjD,mBAAOK,EAAP,KAAqBC,EAArB,KAEMC,EAAeR,EAAcE,GAmBnC,MAAO,CAELO,MAAOP,EACPQ,UApBgBF,GAAgBJ,EAqBhCO,QAASH,EACTI,mBAnByB,SAACC,GAC1BV,EAAgBU,EAAEC,OAAOL,QAmBzBM,iBAhBuB,SAACF,GACxBR,GAAa,GACbE,KAeAS,MAZY,WACZb,EAAgB,IAChBE,GAAa,IAWbC,iB,OC+EWW,EAjHG,SAACC,GAEjB,MAQInB,GAAY,SAACU,GAAD,MAA4B,KAAjBA,EAAMU,UAPxBC,EADT,EACEX,MACUY,EAFZ,EAEEX,SACSY,EAHX,EAGEX,QACoBY,EAJtB,EAIEX,mBACkBY,EALpB,EAKET,iBACOU,EANT,EAMET,MANF,IAOEV,aAAcoB,OAPhB,MAOwC,2BAPxC,EAUA,EAQI3B,GAAY,SAACU,GAAD,MAA4B,KAAjBA,EAAMU,UAPxBQ,EADT,EACElB,MACUmB,EAFZ,EAEElB,SACSmB,EAHX,EAGElB,QACoBmB,EAJtB,EAIElB,mBACkBmB,EALpB,EAKEhB,iBACOiB,EANT,EAMEhB,MANF,IAOEV,aAAc2B,OAPhB,MAOuC,6BAPvC,EAUMC,EAAQ,2DAEd,EAQInC,GAAY,SAACU,GAAD,OAAWyB,EAAMC,KAAK1B,MAP7B2B,EADT,EACE3B,MACU4B,EAFZ,EAEE3B,SACS4B,EAHX,EAGE3B,QACoB4B,EAJtB,EAIE3B,mBACkB4B,EALpB,EAKEzB,iBACO0B,EANT,EAMEzB,MANF,IAOEV,aAAcoC,OAPhB,MAOoC,sBAPpC,EAWIC,GAAc,EAEdvB,GAAoBO,GAAmBS,IACzCO,GAAc,GAGhB,IAYMC,EAAmBvB,EACrB,uBACA,eAEEwB,EAAoBR,EACtB,uBACA,eAEES,EAAuBlB,EACzB,uBACA,eAEJ,OACE,uBAAMmB,SAzBsB,SAAClC,GAC7BA,EAAEmC,kBAEG1B,GAAqBO,GAAoBS,KAI9Cb,EAAe,IACfO,EAAc,IACdS,EAAW,MAgBX,UACE,sBAAKQ,UAAU,gBAAf,UACE,sBAAKA,UAAWL,EAAhB,UACE,uBAAOM,QAAQ,OAAf,wBACA,uBACEC,KAAK,OACLC,GAAG,OACH3C,MAAOW,EACPiC,OAAQ7B,EACR8B,SAAU/B,IAEXF,GACC,mBAAG4B,UAAU,aAAb,SAA2BvB,OAG/B,sBAAKuB,UAAWH,EAAhB,UACE,uBAAOI,QAAQ,OAAf,uBACA,uBACEC,KAAK,OACLC,GAAG,OACH3C,MAAOkB,EACP2B,SAAUxB,EACVuB,OAAQtB,IAETH,GACC,mBAAGqB,UAAU,aAAb,SAA2BhB,UAIjC,sBAAKgB,UAAWJ,EAAhB,UACE,uBAAOK,QAAQ,OAAf,4BACA,uBACEC,KAAK,OACLC,GAAG,OACH3C,MAAO2B,EACPiB,OAAQb,EACRc,SAAUf,IAEXF,GAAiB,mBAAGY,UAAU,aAAb,SAA2BP,OAE/C,qBAAKO,UAAU,eAAf,SACE,wBAAQM,UAAWZ,EAAnB,0BCjGOa,MATf,WACE,OACE,qBAAKP,UAAU,MAAf,SACE,cAAC,EAAD,OCDNQ,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,U","file":"static/js/main.afae1681.chunk.js","sourcesContent":["import { useState } from \"react\";\r\n\r\nconst useValidate = (validateValue) => {\r\n  // Declare const state for enteredValue equal to empty string\r\n  const [enteredValue, setEnteredValue] = useState(\"\");\r\n  // Declare const state for isTouched equal to false\r\n  const [isTouched, setIsTouched] = useState(false);\r\n  const [errorMessage, setErrorMessage] = useState(\"\");\r\n  // Declare valueIsValid const that calls a function validateValue on enterdValue\r\n  const valueIsValid = validateValue(enteredValue);\r\n  // Declare hasError const that evalutes is not valueIsValid and isTouched\r\n  const hasError = !valueIsValid && isTouched;\r\n  // Declare valueChangeHandler event function and setEnteredValue to event target value\r\n\r\n  const valueChangeHandler = (e) => {\r\n    setEnteredValue(e.target.value);\r\n  };\r\n  // Declare inputBlurHandler event function and setIsTouched to true and call setErrorMessage\r\n  const inputBlurHandler = (e) => {\r\n    setIsTouched(true);\r\n    setErrorMessage();\r\n  };\r\n  // Declare reset function that setEnteredValue back to empty string and setIsTouched back to false\r\n  const reset = () => {\r\n    setEnteredValue(\"\");\r\n    setIsTouched(false);\r\n  };\r\n  // return object of keys and values\r\n  return {\r\n    //  value to enteredValue, hasError to hasError, isValid to valueIsValue, valueChangeHandler to valueChangeHandler, inputBlurHandler to inputBlurHandler, reset to reset\r\n    value: enteredValue,\r\n    hasError,\r\n    isValid: valueIsValid,\r\n    valueChangeHandler,\r\n    inputBlurHandler,\r\n    reset,\r\n    errorMessage,\r\n  };\r\n};\r\n\r\nexport default useValidate;\r\n","import useValidate from \"../hooks/validate\";\r\n\r\nconst BasicForm = (props) => {\r\n  // Call useValidate and extract values from the result returned by useValidate. Since it returns an object we can use object destructuring to pull out those keys from the returned object and store the values in new constants. Extract the value and assign const alias.\r\n  const {\r\n    value: enteredFirstName,\r\n    hasError: firstNameHasError,\r\n    isValid: firstNameIsValid,\r\n    valueChangeHandler: firstNameChangeHandler,\r\n    inputBlurHandler: firstNameBlurHandler,\r\n    reset: firstNameReset,\r\n    errorMessage: firstNameErrorMessage = \"First Name must be added\",\r\n  } = useValidate((value) => value.trim() !== \"\");\r\n\r\n  const {\r\n    value: enteredLastName,\r\n    hasError: lastNameHasError,\r\n    isValid: lastNameIsValid,\r\n    valueChangeHandler: lastNameChangeHandler,\r\n    inputBlurHandler: lastNameBlurHandler,\r\n    reset: lastNameReset,\r\n    errorMessage: lastNameErrorMessage = \"Last Name Must Be Included\",\r\n  } = useValidate((value) => value.trim() !== \"\");\r\n\r\n  const regEx = /[a-zA-Z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,8}(.[a-z{2,8}])?/g;\r\n\r\n  const {\r\n    value: enteredEmail,\r\n    hasError: emailHasError,\r\n    isValid: emailIsValid,\r\n    valueChangeHandler: emailChangeHandler,\r\n    inputBlurHandler: emailBlurHandler,\r\n    reset: emailReset,\r\n    errorMessage: emailErrorMessage = \"Email must be valid\",\r\n  } = useValidate((value) => regEx.test(value));\r\n\r\n  // Declare a variable for formIsValid to a boolean\r\n  let formIsValid = false;\r\n  // If the entered value being checked is true, set formIsValid to true\r\n  if (enteredFirstName && enteredLastName && enteredEmail) {\r\n    formIsValid = true;\r\n  }\r\n  // Declare formSubmissionHandler with event preventDefault.\r\n  const formSubmissionHandler = (e) => {\r\n    e.preventDefault();\r\n    // If entered value is not true, end function with a return\r\n    if (!firstNameIsValid && !lastNameIsValid && !emailIsValid) {\r\n      return;\r\n    }\r\n    // reset value input by calling reset function from validate.js\r\n    firstNameReset(\"\");\r\n    lastNameReset(\"\");\r\n    emailReset(\"\");\r\n  };\r\n  // Conditionally render error message and add style to input\r\n  const nameInputClasses = firstNameHasError\r\n    ? \"form-control invalid\"\r\n    : \"form-control\";\r\n\r\n  const emailInputClasses = emailHasError\r\n    ? \"form-control invalid\"\r\n    : \"form-control\";\r\n\r\n  const lastNameInputClasses = lastNameHasError\r\n    ? \"form-control invalid\"\r\n    : \"form-control\";\r\n\r\n  return (\r\n    <form onSubmit={formSubmissionHandler}>\r\n      <div className=\"control-group\">\r\n        <div className={nameInputClasses}>\r\n          <label htmlFor=\"name\">First Name</label>\r\n          <input\r\n            type=\"text\"\r\n            id=\"name\"\r\n            value={enteredFirstName}\r\n            onBlur={firstNameBlurHandler}\r\n            onChange={firstNameChangeHandler}\r\n          />\r\n          {firstNameHasError && (\r\n            <p className=\"error-text\">{firstNameErrorMessage}</p>\r\n          )}\r\n        </div>\r\n        <div className={lastNameInputClasses}>\r\n          <label htmlFor=\"name\">Last Name</label>\r\n          <input\r\n            type=\"text\"\r\n            id=\"name\"\r\n            value={enteredLastName}\r\n            onChange={lastNameChangeHandler}\r\n            onBlur={lastNameBlurHandler}\r\n          />\r\n          {lastNameHasError && (\r\n            <p className=\"error-text\">{lastNameErrorMessage}</p>\r\n          )}\r\n        </div>\r\n      </div>\r\n      <div className={emailInputClasses}>\r\n        <label htmlFor=\"name\">E-Mail Address</label>\r\n        <input\r\n          type=\"text\"\r\n          id=\"name\"\r\n          value={enteredEmail}\r\n          onBlur={emailBlurHandler}\r\n          onChange={emailChangeHandler}\r\n        />\r\n        {emailHasError && <p className=\"error-text\">{emailErrorMessage}</p>}\r\n      </div>\r\n      <div className=\"form-actions\">\r\n        <button disabled={!formIsValid}>Submit</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default BasicForm;\r\n","import BasicForm from \"./components/BasicForm\";\r\n// import SimpleInput from './components/SimpleInput';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"app\">\r\n      <BasicForm />\r\n      {/* <SimpleInput /> */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import ReactDOM from 'react-dom';\r\n\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}